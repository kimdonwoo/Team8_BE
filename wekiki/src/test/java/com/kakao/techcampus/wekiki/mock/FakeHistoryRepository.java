package com.kakao.techcampus.wekiki.mock;

import com.kakao.techcampus.wekiki.history.domain.History;
import com.kakao.techcampus.wekiki.history.service.port.HistoryRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeHistoryRepository implements HistoryRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final ArrayList<History> data = new ArrayList<>();


    @Override
    public Page<History> findAllByGroupMember(Long id, Pageable pageable) {
        List<History> histories = data.stream().filter(item -> item.getGroupMember().getId().equals(id)).toList();
        int start = (int) pageable.getOffset();
        int end = Math.min((start + pageable.getPageSize()), histories.size());
        return new PageImpl<>(histories.subList(start, end), pageable, histories.size());
    }

    @Override
    public void save(History history) {
        if(history.getId() == null || history.getId() == 0){
            History newHistory = History.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .groupMember(history.getGroupMember())
                    .post(history.getPost())
                    .title(history.getTitle())
                    .content(history.getContent())
                    .created_at(history.getCreated_at())
                    .build();
            data.add(newHistory);
            newHistory.getPost().getHistorys().add(newHistory);
        }
    }

    @Override
    public Page<History> findHistoryWithMemberByPostId(Long postId, PageRequest pageRequest) {
        List<History> histories = data.stream().filter(item -> item.getPost().getId().equals(postId)).toList();
        int start = (int) pageRequest.getOffset();
        int end = Math.min((start + pageRequest.getPageSize()), histories.size());
        return new PageImpl<>(histories.subList(start, end), pageRequest, histories.size());
    }


    @Override
    public List<History> findHistoryByPostId(Long postId, PageRequest pageRequest) {
        List<History> histories = data.stream().filter(item -> item.getPost().getId().equals(postId)).toList();
        int start = (int) pageRequest.getOffset();
        int end = Math.min((start + pageRequest.getPageSize()), histories.size());
        return new PageImpl<>(histories.subList(start, end), pageRequest, histories.size()).getContent();
    }
}
