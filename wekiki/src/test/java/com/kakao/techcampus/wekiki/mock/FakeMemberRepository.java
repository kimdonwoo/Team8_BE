package com.kakao.techcampus.wekiki.mock;

import com.kakao.techcampus.wekiki.member.domain.Member;
import com.kakao.techcampus.wekiki.member.service.port.MemberRepository;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMemberRepository implements MemberRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final ArrayList<Member> data = new ArrayList<>();


    @Override
    public Member save(Member member) {
        if(member.getId() == null || member.getId() == 0){
            // 새로운 유저이면 save
            Member newMember = member.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(member.getName())
                    .email(member.getEmail())
                    .password(member.getPassword())
                    .created_at(member.getCreated_at())
                    //.groupMembers(groupMemberEntities.stream().map(GroupMemberEntity::toModel).toList())
                    .authority(member.getAuthority())
                    .build();
            data.add(newMember);
            return newMember;
        }else{
            // 아니면 update
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
            return member;
        }
    }


    @Override
    public Optional<Member> findById(Long currentMember) {
        return data.stream().filter(item -> item.getId().equals(currentMember)).findAny();
    }

    @Override
    public Optional<Member> findByEmail(String email) {
        return data.stream().filter(item -> item.getEmail().equals(email)).findAny();
    }
    @Override
    public void deleteModify(Member member) {
        data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
    }
}
