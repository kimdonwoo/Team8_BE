package com.kakao.techcampus.wekiki.mock;


import com.kakao.techcampus.wekiki.group.domain.GroupMember;
import com.kakao.techcampus.wekiki.group.service.port.GroupMemberRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeGroupMemberRepository implements GroupMemberRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final ArrayList<GroupMember> data = new ArrayList<>();

    @Override
    public GroupMember save(GroupMember groupMember) {
        if(groupMember.getId() == null || groupMember.getId() == 0){
            // 새로운 유저이면 save
            GroupMember newGroupMember = GroupMember.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .member(groupMember.getMember())
                    .group(groupMember.getGroup())
                    .nickName(groupMember.getNickName())
                    .memberLevel(groupMember.getMemberLevel())
                    .created_at(groupMember.getCreated_at())
                    .activeStatus(groupMember.isActiveStatus())
                    .build();
            data.add(newGroupMember);
            return newGroupMember;
        }else{
            // 아니면 update
            data.removeIf(item -> Objects.equals(item.getId(), groupMember.getId()));
            data.add(groupMember);
            return groupMember;
        }
    }

    @Override
    public List<GroupMember> findAllByGroupId(Long id) {
        return data.stream().filter(item -> item.getGroup().getId().equals(id)).toList();
    }

    @Override
    public Optional<GroupMember> findGroupMemberByNickName(Long groupId, String nickName) {
        return data.stream().filter(item -> item.getGroup().getId().equals(groupId) && item.getNickName().equals(nickName)).findAny();
    }

    @Override
    public Optional<GroupMember> findGroupMemberByMemberIdAndGroupIdFetchJoin(Long memberId, Long groupId) {
        return data.stream().filter(item->item.getMember().getId().equals(memberId) && item.getGroup().getId().equals(groupId)).findFirst();
    }

    @Override
    public GroupMember findGroupMemberByMemberIdAndGroupId(Long memberId, Long groupId) {
        return data.stream().filter(item -> item.getMember().getId().equals(memberId) && item.getGroup().getId().equals(groupId)).findFirst().get();
    }




}
