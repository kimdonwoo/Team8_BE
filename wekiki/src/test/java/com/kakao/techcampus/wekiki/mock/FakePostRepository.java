package com.kakao.techcampus.wekiki.mock;

import com.kakao.techcampus.wekiki.comment.infrastructure.CommentEntity;
import com.kakao.techcampus.wekiki.group.domain.GroupMember;
import com.kakao.techcampus.wekiki.history.infrastructure.HistoryEntity;
import com.kakao.techcampus.wekiki.pageInfo.domain.PageInfo;
import com.kakao.techcampus.wekiki.post.domain.Post;
import com.kakao.techcampus.wekiki.post.service.port.PostRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostRepository implements PostRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final ArrayList<Post> data = new ArrayList<>();

    // 이렇게 하면 post로 히스토리랑 comment 못찾음
    @Override
    public Post save(Post post) {
        if(post.getId() == null || post.getId() == 0){
            // 새로운 유저이면 save
            Post newPost = Post.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    //.parent(post.getParent())
                    .orders(post.getOrders())
                    .groupMember(post.getGroupMember())
                    .pageInfo(post.getPageInfo())
                    //.historys(historyEntities.stream().map(HistoryEntity::toModel).toList())
                    //.comments(commentEntities.stream().map(CommentEntity::toModel).toList())
                    .title(post.getTitle())
                    .content(post.getContent())
                    .created_at(post.getCreated_at())
                    .build();
            data.add(newPost);
            return newPost;
        }else{
            // 아니면 update
            data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
            data.add(post);
            return post;
        }
    }
    @Override
    public List<Post> findPostsByPageIdAndOrderGreaterThan(Long pageId, int orders) {
        return data.stream().filter(item -> item.getPageInfo().getId().equals(pageId) && item.getOrders() >= orders)
                .toList();
    }

    @Override
    public Optional<Post> findPostWithPageFromPostId(Long postId) {
        return data.stream().filter(item -> item.getId().equals(postId)).findAny();
    }

    @Override
    public boolean existsByPageInfoId(Long pageInfoId) {
        if(data.stream().filter(item -> item.getPageInfo().getId().equals(pageInfoId)).findFirst().isPresent()) return true;
        return false;
    }

    @Override
    public boolean existsByParentId(Long parentId) {
        if(data.stream().filter(item -> item.getParent().getId().equals(parentId)).findFirst().isPresent()) return true;
        return false;
    }

    @Override
    public List<Post> findPostInPages(List<PageInfo> pages) {
        return data.stream().filter(item -> pages.contains(item.getPageInfo())).toList();
    }

    @Override
    public Optional<Post> findById(Long postId) {
        return data.stream().filter(item -> item.getId().equals(postId)).findAny();
    }

    @Override
    public void deleteById(Long postId) {
        data.removeIf(item -> Objects.equals(item.getId(), postId));
    }
}
