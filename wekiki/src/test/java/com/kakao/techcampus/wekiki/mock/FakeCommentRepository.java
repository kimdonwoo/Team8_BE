package com.kakao.techcampus.wekiki.mock;

import com.kakao.techcampus.wekiki.comment.domain.Comment;
import com.kakao.techcampus.wekiki.comment.service.port.CommentRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeCommentRepository implements CommentRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final ArrayList<Comment> data = new ArrayList<>();


    @Override
    public Comment save(Comment comment) {
        if(comment.getId() == null || comment.getId() == 0){
            // 새로운 댓글이면 save
            Comment newComment = Comment.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .groupMember(comment.getGroupMember())
                    .post(comment.getPost())
                    .content(comment.getContent())
                    .created_at(comment.getCreated_at())
                    .build();
            data.add(newComment);
            return newComment;
        }else{
            // 아니면 update
            data.removeIf(item -> Objects.equals(item.getId(), comment.getId()));
            data.add(comment);
            return comment;
        }
    }

    @Override
    public void delete(Comment comment) {
        data.removeIf(item -> Objects.equals(item.getId(),comment.getId()));
    }

    @Override
    public Optional<Comment> findCommentWithGroupMember(Long commentId) {
        return data.stream().filter(item->item.getId().equals(commentId)).findAny();
    }

    @Override
    public Page<Comment> findCommentsByPostIdWithGroupMembers(Long postId, PageRequest pageRequest) {
        List<Comment> comments = data.stream().filter(item->item.getPost().getId().equals(postId)).toList();
        int start = (int) pageRequest.getOffset();
        int end = Math.min((start + pageRequest.getPageSize()), comments.size());
        return new PageImpl<>(comments.subList(start, end), pageRequest, comments.size());
    }

}
