package com.kakao.techcampus.wekiki.mock;

import com.kakao.techcampus.wekiki.group.domain.Group;
import com.kakao.techcampus.wekiki.group.domain.OfficialGroup;
import com.kakao.techcampus.wekiki.group.domain.UnOfficialClosedGroup;
import com.kakao.techcampus.wekiki.group.domain.UnOfficialOpenedGroup;
import com.kakao.techcampus.wekiki.group.service.port.GroupRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeGroupRepository implements GroupRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final ArrayList<Group> data = new ArrayList<>();


    @Override
    public List<OfficialGroup> findAllOfficialGroup() {
        return data.stream().filter(item -> item instanceof OfficialGroup)
                .map(group -> (OfficialGroup) group).toList();
    }

    @Override
    public List<UnOfficialOpenedGroup> findAllUnOfficialOpenGroup() {
        return data.stream().filter(item -> item instanceof UnOfficialOpenedGroup)
                .map(group -> (UnOfficialOpenedGroup) group).toList();
    }

    @Override
    public Page<OfficialGroup> findOfficialGroupsByKeyword(String keyword, Pageable pageable) {
        List<OfficialGroup> officialGroups = data.stream().filter(item -> item instanceof OfficialGroup).map(group -> (OfficialGroup) group)
                .filter(group -> group.getGroupName().contains(keyword)).toList();
        int start = (int) pageable.getOffset();
        int end = Math.min((start + pageable.getPageSize()), officialGroups.size());
        return new PageImpl<>(officialGroups.subList(start, end), pageable, officialGroups.size());
    }

    @Override
    public Page<UnOfficialOpenedGroup> findUnOfficialOpenedGroupsByKeyword(String keyword, Pageable pageable) {
        List<UnOfficialOpenedGroup> unOfficialOpenedGroup = data.stream().filter(item -> item instanceof UnOfficialOpenedGroup).map(group -> (UnOfficialOpenedGroup) group)
                .filter(group -> group.getGroupName().contains(keyword)).toList();
        int start = (int) pageable.getOffset();
        int end = Math.min((start + pageable.getPageSize()), unOfficialOpenedGroup.size());
        return new PageImpl<>(unOfficialOpenedGroup.subList(start, end), pageable, unOfficialOpenedGroup.size());
    }

    @Override
    public Optional<UnOfficialOpenedGroup> findUnOfficialOpenedGroupById(Long id) {
        return data.stream().filter(item -> item instanceof UnOfficialOpenedGroup)
                .filter(item -> item.getId() == 1L)
                .map(group -> (UnOfficialOpenedGroup) group)
                .findAny();
    }

    @Override
    public Optional<Group> findById(Long groupId) {
        return data.stream().filter(item -> item.getId().equals(groupId)).findAny();
    }

    // TODO : 이게 맞나 ?
    @Override
    public Group save(Group group) {
        if(group.getId() == null || group.getId() == 0){
            if (group instanceof OfficialGroup) {
                // OfficialGroup 타입일 때의 처리
                OfficialGroup officialGroup = OfficialGroup.officialGroupBuilder()
                        .id(autoGeneratedId.incrementAndGet())
                        .groupName(group.getGroupName())
                        .groupProfileImage(group.getGroupProfileImage())
                        //.groupMembers(this.groupMemberEntities.stream().map(GroupMemberEntity::toModel).toList())
                        .memberCount(group.getMemberCount())
                        .created_at(group.getCreated_at())
                        .build();
                data.add(officialGroup);
                return officialGroup;
            } else if (group instanceof UnOfficialClosedGroup) {
                // UnOfficialClosedGroup 타입일 때의 처리
                UnOfficialClosedGroup unOfficialClosedGroup = UnOfficialClosedGroup.unOfficialClosedGroupBuilder()
                        .id(autoGeneratedId.incrementAndGet())
                        .groupName(group.getGroupName())
                        .groupProfileImage(group.getGroupProfileImage())
                        //.groupMembers(this.groupMemberEntities.stream().map(GroupMemberEntity::toModel).toList())
                        .memberCount(group.getMemberCount())
                        .created_at(group.getCreated_at())
                        .build();
                data.add(unOfficialClosedGroup);
                return unOfficialClosedGroup;
            } else if (group instanceof UnOfficialOpenedGroup) {
                // UnOfficialOpenedGroup 타입일 때의 처리
                UnOfficialOpenedGroup unOfficialOpenedGroup = UnOfficialOpenedGroup.unOfficialOpenedGroupBuilder()
                        .id(autoGeneratedId.incrementAndGet())
                        .groupName(group.getGroupName())
                        .groupProfileImage(group.getGroupProfileImage())
                        //.groupMembers(this.groupMemberEntities.stream().map(GroupMemberEntity::toModel).toList())
                        .memberCount(group.getMemberCount())
                        .created_at(group.getCreated_at())
                        .introduction(((UnOfficialOpenedGroup) group).getIntroduction())
                        .entranceHint(((UnOfficialOpenedGroup) group).getEntranceHint())
                        .entrancePassword(((UnOfficialOpenedGroup) group).getEntranceHint())
                        .build();
                data.add(unOfficialOpenedGroup);
                return unOfficialOpenedGroup;
            }
        }else{
            // 아니면 update
            data.removeIf(item -> Objects.equals(item.getId(), group.getId()));
            data.add(group);
            return group;
        }
        return group;
    }

    @Override
    public void delete(Group group) {
        data.removeIf(item -> Objects.equals(item.getId(), group.getId()));
    }
}
